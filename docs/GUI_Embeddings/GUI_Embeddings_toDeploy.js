importScripts("https://cdn.jsdelivr.net/pyodide/v0.27.0/full/pyodide.js");

function sendPatch(patch, buffers, msg_id) {
  self.postMessage({
    type: 'patch',
    patch: patch,
    buffers: buffers
  })
}

async function startApplication() {
  console.log("Loading pyodide!");
  self.postMessage({type: 'status', msg: 'Loading pyodide'})
  self.pyodide = await loadPyodide();
  self.pyodide.globals.set("sendPatch", sendPatch);
  console.log("Loaded!");
  await self.pyodide.loadPackage("micropip");
  const env_spec = ['https://cdn.holoviz.org/panel/wheels/bokeh-3.6.2-py3-none-any.whl', 'https://cdn.holoviz.org/panel/1.6.0/dist/wheels/panel-1.6.0-py3-none-any.whl', 'pyodide-http==0.2.1', 'numpy', 'pandas', 'scipy', 'utils']
  for (const pkg of env_spec) {
    let pkg_name;
    if (pkg.endsWith('.whl')) {
      pkg_name = pkg.split('/').slice(-1)[0].split('-')[0]
    } else {
      pkg_name = pkg
    }
    self.postMessage({type: 'status', msg: `Installing ${pkg_name}`})
    try {
      await self.pyodide.runPythonAsync(`
        import micropip
        await micropip.install('${pkg}');
      `);
    } catch(e) {
      console.log(e)
      self.postMessage({
	type: 'status',
	msg: `Error while installing ${pkg_name}`
      });
    }
  }
  console.log("Packages loaded!");
  self.postMessage({type: 'status', msg: 'Executing code'})
  const code = `
  \nimport asyncio\n\nfrom panel.io.pyodide import init_doc, write_doc\n\ninit_doc()\n\n# ---\n# jupyter:\n#   jupytext:\n#     formats: ipynb,py:light\n#     text_representation:\n#       extension: .py\n#       format_name: light\n#       format_version: '1.5'\n#       jupytext_version: 1.15.2\n#   kernelspec:\n#     display_name: opentsne_panel14\n#     language: python\n#     name: opentsne_panel14\n# ---\n\nimport panel as pn\nimport numpy as np\nimport os.path as osp\nimport pandas as pd\nfrom scipy.stats import zscore\n\n# +\nfrom utils.basics import PRJ_DIR, PNAS2015_subject_list, sbj_cmap_list,sbj_cmap_dict\nfrom utils.basics import le_dist_metrics, le_knns, le_ms\nfrom utils.basics import umap_dist_metrics, umap_knns, umap_ms, umap_alphas, umap_inits\nfrom utils.basics import tsne_dist_metrics, tsne_pps, tsne_ms, tsne_alphas, tsne_inits\nfrom utils.basics import input_datas, norm_methods\nfrom utils.basics import task_cmap_caps as task_cmap\nfrom utils.basics import sbj_cmap_dict, sbj_cmap_list\nfrom utils.plotting import plot_2d_scatter, plot_3d_scatter\nfrom utils.io import load_LE_SI, load_UMAP_SI, load_TSNE_SI\n\nfrom utils.plotting import get_SIvsKNN_plots\nfrom utils.io import load_single_le, load_single_umap, load_single_tsne\n# -\n\n# So far we are working with these values of wls and wss across the whole manuscript\nwls = 45\nwss = 1.5\nmin_dist = 0.8\n\n# ***\n# # Main Dashboard Panel: Configuration Options\n\nsbj_select = pn.widgets.Select(name='Scan', options=PNAS2015_subject_list, value=PNAS2015_subject_list[0], width=150, description='Select the scan you want to explore in the single-scan section.')\ninput_select    = pn.widgets.Select(name='Scenario', options=['Original','Null_ConnRand','Null_PhaseRand'], value='Original', width=150, description='Use original data or randomize data (phase or connection randomized)')\nscenario_select = pn.widgets.Select(name='Normalization',           options=['asis','zscored'], value='asis', width=150,description='Select asis to indicate no normalization, or z-score if you want to normalize the data')\nplot2d_toolbar_select = pn.widgets.Select(name='2D Toolbar', options=['above', 'below', 'left', 'right', 'disable'], value='disable', width=150, description='Sometimes toolbars get on the way. Here you can select its location or to disable it') \n\n# ***\n# # Laplacian Eigenmaps\n\n# #### 1. Load Silhouette Index for LE\n\n# %%time\nsi_LE = pd.read_pickle(osp.join(PRJ_DIR,'Dashboard','Data','si_LE.pkl'))\n\n# #### 3. LE Tab Elements\n\nle_m_select     = pn.widgets.Select(name='M',               options=[2,3,5,10,15,20,25,30],         value=5, width=150, description='Number of dimensions used for computing the embedding. This only affects the right-most 3D plot, as the 2D (left) and 3D (middle) embedding are always computed using 2 and 3 dimensions respectively.')\nle_knn_select   = pn.widgets.Select(name='Knn',             options=le_knns,         value=le_knns[0], width=150, description='Neighborhood Size for Laplacian Embeddings')\nle_dist_select  = pn.widgets.Select(name='Distance Metric', options=le_dist_metrics, value=le_dist_metrics[0], width=150,description='Distance metric used when computing Laplacian Embeddings')\nle_grcc_col_sel = pn.widgets.Select(name='[G-CC] Color By:', options=['Window Name','Subject'], value='Window Name', width=150, description='Color points in Group-level concatenated embedding according to task or scan membership.')\nle_grpt_col_sel = pn.widgets.Select(name='[G-PT] Color By:', options=['Window Name','Subject'], value='Window Name', width=150, description='Color points in Group-level Procrustes embedding according to task or scan membership.')\nle_drop_xxxx    = pn.widgets.Checkbox(name='Drop Mixed Windows?', width=150)\nle_conf_box     = pn.WidgetBox(le_dist_select,le_knn_select,le_m_select,le_grcc_col_sel,le_grpt_col_sel,le_drop_xxxx)\nle_conf_box\n\n\ndef plot_LE_scats(group_type,input_data,scenario,dist,knn,m,color_col,plot_2d_toolbar,drop_xxxx):\n    plots = None\n    aux_2d, aux_3d, aux_Md = None, None, None\n    if group_type in ['Procrustes','ALL']:\n        sitable_2d, sitable_3d, sitable_Md = pn.pane.DataFrame(pd.DataFrame(index=pd.Index(['Subject','Task'],name='Target'),columns=['SI']),width=150),pn.pane.DataFrame(pd.DataFrame(index=pd.Index(['Subject','Task'],name='Target'),columns=['SI']),width=150),pn.pane.DataFrame(pd.DataFrame(index=pd.Index(['Subject','Task'],name='Target'),columns=['SI']),width=150)\n    else:\n        sitable_2d, sitable_3d, sitable_Md = pn.pane.DataFrame(pd.DataFrame(index=pd.Index(['Task'],name='Target'),columns=['SI']),width=150),pn.pane.DataFrame(pd.DataFrame(index=pd.Index(['Task'],name='Target'),columns=['SI']),width=150),pn.pane.DataFrame(pd.DataFrame(index=pd.Index(['Task'],name='Target'),columns=['SI']),width=150)\n    # Load all necessary embeddings\n    # =============================\n    if m == 2:\n        aux_2d = load_single_le(group_type,input_data,scenario,dist,knn,2,drop_xxxx=drop_xxxx)\n    elif m == 3:\n        aux_2d = load_single_le(group_type,input_data,scenario,dist,knn,2,drop_xxxx=drop_xxxx)\n        aux_3d = load_single_le(group_type,input_data,scenario,dist,knn,3,drop_xxxx=drop_xxxx)\n    else:\n        aux_2d = load_single_le(group_type,input_data,scenario,dist,knn,2,drop_xxxx=drop_xxxx)\n        aux_3d = load_single_le(group_type,input_data,scenario,dist,knn,3,drop_xxxx=drop_xxxx)\n        aux_Md = load_single_le(group_type,input_data,scenario,dist,knn,m,drop_xxxx=drop_xxxx)\n    # Preprare Embeddings\n    # ===================\n    if not (aux_2d is None):\n        aux_2d = aux_2d.apply(zscore)\n        aux_2d = aux_2d.reset_index()\n    #    aux_2d.set_index('Window Name', inplace=True)\n    #    aux_2d = aux_2d.sort_index(level='Window Name',ascending=False) # So Inbetween are plotted in the back (for clarity)\n    #    aux_2d = aux_2d.reset_index()\n    \n    if not (aux_3d is None):\n         aux_3d = aux_3d.apply(zscore)\n         aux_3d = aux_3d.reset_index()\n     #    aux_3d.set_index('Window Name', inplace=True)\n     #    aux_3d = aux_3d.sort_index(level='Window Name',ascending=False) # So Inbetween are plotted in the back (for clarity)\n     #    aux_3d = aux_3d.reset_index()\n\n    if not (aux_Md is None):\n         aux_Md = aux_Md.apply(zscore)\n         aux_Md = aux_Md.reset_index()\n      #   aux_Md.set_index('Window Name', inplace=True)\n      #   aux_Md = aux_Md.sort_index(level='Window Name',ascending=False) # So Inbetween are plotted in the back (for clarity)\n      #   aux_Md = aux_Md.reset_index()\n\n    # Prepare SI Tables\n    # =================\n    if (group_type,input_data,scenario,dist,knn,2) in si_LE.index:\n        sitable_2d = pn.pane.DataFrame(si_LE.loc[group_type,input_data,scenario,dist,knn,2].round(2),width=150)\n    if (group_type,input_data,scenario,dist,knn,3) in si_LE.index:\n        sitable_3d = pn.pane.DataFrame(si_LE.loc[group_type,input_data,scenario,dist,knn,3].round(2),width=150)\n    if (group_type,input_data,scenario,dist,knn,m) in si_LE.index:\n        sitable_Md = pn.pane.DataFrame(si_LE.loc[group_type,input_data,scenario,dist,knn,m].round(2),width=150)\n    # Prepare Color-scales\n    # ====================\n    if color_col == 'Subject':\n        cmap_2d = sbj_cmap_dict\n        cmap_3d = sbj_cmap_list\n    else:\n        cmap_2d = task_cmap\n        if not(aux_3d is None):\n            cmap_3d = [task_cmap[t] for t in aux_3d['Window Name'].unique()]\n    # Plotting\n    # ========\n    if (not (aux_2d is None)) & (aux_3d is None):\n        plots = pn.GridBox(*[plot_2d_scatter(aux_2d,x='LE001',y='LE002',c=color_col, cmap=cmap_2d, s=10, toolbar=plot_2d_toolbar),sitable_2d],ncols=1)\n    if (not (aux_2d is None)) & (not (aux_3d is None)) & (aux_Md is None):\n        plots = pn.GridBox(*[plot_2d_scatter(aux_2d,x='LE001',y='LE002',c=color_col, cmap=cmap_2d, s=10, toolbar=plot_2d_toolbar),\n                             plot_3d_scatter(aux_3d,x='LE001',y='LE002',z='LE003',c=color_col, cmap=cmap_3d,s=3, ax_range=[-2,2]),\n                             sitable_2d, sitable_3d],ncols=2)\n    if (not (aux_2d is None)) & (not (aux_3d is None)) & (not (aux_Md is None)):\n        plots = pn.GridBox(*[plot_2d_scatter(aux_2d,x='LE001',y='LE002',c=color_col, cmap=cmap_2d, s=10, toolbar=plot_2d_toolbar),\n                             plot_3d_scatter(aux_3d,x='LE001',y='LE002',z='LE003',c=color_col, cmap=cmap_3d,s=3, ax_range=[-2,2]),\n                             plot_3d_scatter(aux_Md,x='LE001',y='LE002',z='LE003',c=color_col, cmap=cmap_3d,s=3, ax_range=[-2,2]),\n                             sitable_2d,sitable_3d,sitable_Md],ncols=3) \n    return plots\n\n\n@pn.depends(input_select,scenario_select,le_dist_select,le_knn_select,le_m_select,le_grcc_col_sel,plot2d_toolbar_select,le_drop_xxxx)\ndef plot_LE_Group_Concat_scats(input_data,scenario,dist,knn,m,color_col,plot_2d_toolbar,drop_xxxx):\n    return plot_LE_scats('ALL',input_data,scenario,dist,knn,m,color_col,plot_2d_toolbar,drop_xxxx)\n@pn.depends(input_select,scenario_select,le_dist_select,le_knn_select,le_m_select,le_grpt_col_sel,plot2d_toolbar_select,le_drop_xxxx)\ndef plot_LE_Group_Procrustes_scats(input_data,scenario,dist,knn,m,color_col,plot_2d_toolbar,drop_xxxx):\n    return plot_LE_scats('Procrustes',input_data,scenario,dist,knn,m,color_col,plot_2d_toolbar,drop_xxxx)\n@pn.depends(sbj_select,input_select,scenario_select,le_dist_select,le_knn_select,le_m_select,plot2d_toolbar_select,le_drop_xxxx)\ndef plot_LE_Scan_scats(sbj,input_data,scenario,dist,knn,m,plot_2d_toolbar, drop_xxxx):\n    return plot_LE_scats(sbj,input_data,scenario,dist,knn,m,'Window Name',plot_2d_toolbar,drop_xxxx)\n\n\nle_figs_folder                = osp.join(PRJ_DIR,'Dashboard','Figures','LE')\nle_config_card                = pn.Column(le_conf_box)\nle_embs_scan_card             = pn.layout.Card(plot_LE_Scan_scats,title='Scatter Plots - One Scan', width=825)\nle_embs_group_concat_card     = pn.layout.Card(plot_LE_Group_Concat_scats,title='Scatter Plots - Group Concatenation', width=825)\nle_embs_group_procrustes_card = pn.layout.Card(plot_LE_Group_Procrustes_scats,title='Scatter Plots - Procrustes', width=825)\nle_embs_col = pn.Column(le_embs_scan_card ,le_embs_group_concat_card,le_embs_group_procrustes_card)\n\nle_tab=pn.Row(le_config_card,le_embs_col)\n\n# ***\n# # UMAP\n# #### 1. Load Silhouette Index for UMAP\n#\n# Hyper-parameter space: 3 Inputs * 2 Norm Approach * 8 m * 3 dist * x knns * 3 alphas = \n# * "Concat + UMAP": 17280 entries\n# * "UMAP + Procrustes": 17280 entries\n# * Single-Scan Level: 345600 entries\n\nsi_UMAP = pd.read_pickle(osp.join(PRJ_DIR,'Dashboard','Data','si_UMAP.pkl'))\n\n# #### 3. UMAP Tab Elements\n\n# +\numap_figs_folder  = osp.join(PRJ_DIR,'Dashboard','Figures','UMAP')\numap_knn_select   = pn.widgets.Select(name='Knn',             options=umap_knns,         value=umap_knns[0], width=150)\numap_dist_select  = pn.widgets.Select(name='Distance Metric', options=umap_dist_metrics, value=umap_dist_metrics[0], width=150)\numap_m_select     = pn.widgets.Select(name='M',   options=umap_ms,           value=umap_ms[0], width=150)\numap_alpha_select = pn.widgets.Select(name='Learning Rate',   options=umap_alphas,       value=umap_alphas[0], width=150)\numap_init_select  = pn.widgets.Select(name='Init Method',     options=['spectral'],        value='spectral', width=150)\numap_mdist_select = pn.widgets.Select(name='Minimum Distance', options=[0.8],            value=0.8, width=150)\numap_grcc_col_sel = pn.widgets.Select(name='[G-CC] Color By:', options=['Window Name','Subject','Alertness','Focus','Consistency','Dificulty'], value='Window Name', width=150)\numap_grpt_col_sel = pn.widgets.Select(name='[G-PT] Color By:', options=['Window Name','Subject','Alertness','Focus','Consistency','Dificulty'], value='Window Name', width=150)\numap_drop_xxxx    = pn.widgets.Checkbox(name='Drop Mixed Windows', width=150)\n\numap_conf_box     = pn.WidgetBox(umap_dist_select,umap_knn_select,umap_init_select,umap_m_select,umap_alpha_select,umap_mdist_select,umap_grcc_col_sel,umap_grpt_col_sel,umap_drop_xxxx)\n\numap_LEFT_col     = pn.Column(umap_conf_box)\numap_LEFT_col\n\n\n# -\n\n# #### 3. Plotting Functions            \n\ndef plot_UMAP_scats(group_type,input_data,scenario,dist,knn,m,alpha,init_method,min_dist,color_col,plot_2d_toolbar,drop_xxxx):\n    plots = None\n    aux_2d, aux_3d, aux_Md = None, None, None\n    if group_type in ['Procrustes','ALL']:\n        sitable_2d, sitable_3d, sitable_Md = pn.pane.DataFrame(pd.DataFrame(index=pd.Index(['Subject','Task'],name='Target'),columns=['SI']),width=150),pn.pane.DataFrame(pd.DataFrame(index=pd.Index(['Subject','Task'],name='Target'),columns=['SI']),width=150),pn.pane.DataFrame(pd.DataFrame(index=pd.Index(['Subject','Task'],name='Target'),columns=['SI']),width=150)\n    else:\n        sitable_2d, sitable_3d, sitable_Md = pn.pane.DataFrame(pd.DataFrame(index=pd.Index(['Task'],name='Target'),columns=['SI']),width=150),pn.pane.DataFrame(pd.DataFrame(index=pd.Index(['Task'],name='Target'),columns=['SI']),width=150),pn.pane.DataFrame(pd.DataFrame(index=pd.Index(['Task'],name='Target'),columns=['SI']),width=150)\n    # Load all necessary embeddings\n    # =============================\n    if m == 2:\n        aux_2d = load_single_umap(group_type,input_data,scenario,dist,knn,alpha,init_method,min_dist,2,drop_xxxx=drop_xxxx)\n    elif m == 3:\n        aux_2d = load_single_umap(group_type,input_data,scenario,dist,knn,alpha,init_method,min_dist,2,drop_xxxx=drop_xxxx)\n        aux_3d = load_single_umap(group_type,input_data,scenario,dist,knn,alpha,init_method,min_dist,3,drop_xxxx=drop_xxxx)\n    else:\n        aux_2d = load_single_umap(group_type,input_data,scenario,dist,knn,alpha,init_method,min_dist,2,drop_xxxx=drop_xxxx)\n        aux_3d = load_single_umap(group_type,input_data,scenario,dist,knn,alpha,init_method,min_dist,3,drop_xxxx=drop_xxxx)\n        aux_Md = load_single_umap(group_type,input_data,scenario,dist,knn,alpha,init_method,min_dist,m,drop_xxxx=drop_xxxx)\n    # Preprare Embeddings\n    # ===================\n    if not (aux_2d is None):\n         aux_2d = aux_2d.apply(zscore)\n         aux_2d = aux_2d.reset_index()\n    #     aux_2d = aux_2d.sort_index(level='Window Name',ascending=False) # So Inbetween are plotted in the back (for clarity)\n    if not (aux_3d is None):\n         aux_3d = aux_3d.apply(zscore)\n         aux_3d = aux_3d.reset_index()\n    #     aux_3d = aux_3d.sort_index(level='Window Name',ascending=False) # So Inbetween are plotted in the back (for clarity)\n    if not (aux_Md is None):\n         aux_Md = aux_Md.apply(zscore)\n         aux_Md = aux_Md.reset_index()\n    #     aux_Md = aux_Md.sort_index(level='Window Name',ascending=False) # So Inbetween are plotted in the back (for clarity)\n    # Prepare SI Tables\n    # =================\n    if (group_type,input_data,scenario,init_method,min_dist,dist,knn,alpha,2) in si_UMAP.index:\n        sitable_2d = pn.pane.DataFrame(si_UMAP.loc[group_type,input_data,scenario,init_method,min_dist,dist,knn,alpha,2].round(2),width=150)\n    if (group_type,input_data,scenario,init_method,min_dist,dist,knn,alpha,3) in si_UMAP.index:\n        sitable_3d = pn.pane.DataFrame(si_UMAP.loc[group_type,input_data,scenario,init_method,min_dist,dist,knn,alpha,3].round(2),width=150)\n    if (group_type,input_data,scenario,init_method,min_dist,dist,knn,alpha,m) in si_UMAP.index:\n        sitable_Md = pn.pane.DataFrame(si_UMAP.loc[group_type,input_data,scenario,init_method,min_dist,dist,knn,alpha,m].round(2),width=150)\n    # Prepare Color-scales\n    # ====================\n    if color_col == 'Subject':\n        cmap_2d = sbj_cmap_dict\n        cmap_3d = sbj_cmap_list\n    else:\n        cmap_2d = task_cmap\n        if not(aux_3d is None):\n            cmap_3d = [task_cmap[t] for t in aux_3d['Window Name'].unique()]\n    # Plotting\n    # ========\n    if (not (aux_2d is None)) & (aux_3d is None):\n        plots = pn.GridBox(*[plot_2d_scatter(aux_2d,x='UMAP001',y='UMAP002',c=color_col, cmap=cmap_2d, s=10, toolbar=plot_2d_toolbar),sitable_2d],ncols=1)\n    if (not (aux_2d is None)) & (not (aux_3d is None)) & (aux_Md is None):\n        plots = pn.GridBox(*[plot_2d_scatter(aux_2d,x='UMAP001',y='UMAP002',c=color_col, cmap=cmap_2d, s=10, toolbar=plot_2d_toolbar),\n                             plot_3d_scatter(aux_3d,x='UMAP001',y='UMAP002',z='UMAP003',c=color_col, cmap=cmap_3d,s=3, ax_range=[-2,2]),\n                             sitable_2d, sitable_3d],ncols=2)\n    if (not (aux_2d is None)) & (not (aux_3d is None)) & (not (aux_Md is None)):\n        plots = pn.GridBox(*[plot_2d_scatter(aux_2d,x='UMAP001',y='UMAP002',c=color_col, cmap=cmap_2d, s=10, toolbar=plot_2d_toolbar),\n                             plot_3d_scatter(aux_3d,x='UMAP001',y='UMAP002',z='UMAP003',c=color_col, cmap=cmap_3d,s=3, ax_range=[-2,2]),\n                             plot_3d_scatter(aux_Md,x='UMAP001',y='UMAP002',z='UMAP003',c=color_col, cmap=cmap_3d,s=3, ax_range=[-2,2]),\n                             sitable_2d,sitable_3d,sitable_Md],ncols=3) \n    return plots\n\n\n@pn.depends(input_select,scenario_select,umap_dist_select,umap_knn_select,umap_m_select,umap_alpha_select,umap_init_select,umap_mdist_select,umap_grcc_col_sel,plot2d_toolbar_select,umap_drop_xxxx)\ndef plot_UMAP_Group_Concat_scats(input_data,scenario,dist,knn,m,alpha,init_method,min_dist,color_col,plot_2d_toolbar,drop_xxxx):\n    return plot_UMAP_scats('ALL',input_data,scenario,dist,knn,m,alpha,init_method,min_dist,color_col,plot_2d_toolbar,drop_xxxx)\n@pn.depends(input_select,scenario_select,umap_dist_select,umap_knn_select,umap_m_select,umap_alpha_select,umap_init_select,umap_mdist_select,umap_grpt_col_sel,plot2d_toolbar_select,umap_drop_xxxx)\ndef plot_UMAP_Group_Procustes_scats(input_data,scenario,dist,knn,m,alpha,init_method,min_dist,color_col,plot_2d_toolbar,drop_xxxx):\n    return plot_UMAP_scats('Procrustes',input_data,scenario,dist,knn,m,alpha,init_method,min_dist,color_col,plot_2d_toolbar,drop_xxxx)\n@pn.depends(sbj_select,input_select,scenario_select,umap_dist_select,umap_knn_select,umap_m_select,umap_alpha_select,umap_init_select,umap_mdist_select,plot2d_toolbar_select,umap_drop_xxxx)\ndef plot_UMAP_Scan_scats(sbj,input_data,scenario,dist,knn,m,alpha,init_method,min_dist,plot_2d_toolbar,drop_xxxx):\n    return plot_UMAP_scats(sbj,input_data,scenario,dist,knn,m,alpha,init_method,min_dist,'Window Name',plot_2d_toolbar,drop_xxxx)\n\n\n# #### 4. Constructing UMAP Tab with all elements\n\numap_embs_scan_card             = pn.layout.Card(plot_UMAP_Scan_scats,title='Scatter Plots - One Scan', width=825)\numap_embs_group_concat_card     = pn.layout.Card(plot_UMAP_Group_Concat_scats,title='Scatter Plots - Group Concatenation', width=825)\numap_embs_group_procrustes_card = pn.layout.Card(plot_UMAP_Group_Procustes_scats,title='Scatter Plots - Procrustes', width=825)\numap_embs_col = pn.Column(umap_embs_scan_card ,umap_embs_group_concat_card,umap_embs_group_procrustes_card)\n\numap_tab = pn.Row(umap_LEFT_col,umap_embs_col)\n\n# ***\n# # TSNE\n# #### 1. Load Silhouette Index for TSNE\n\nsi_TSNE = pd.read_pickle(osp.join(PRJ_DIR,'Dashboard','Data','si_TSNE.pkl'))\n\n# #### 2. TSNE Tab Elements\n\n# +\ntsne_figs_folder  = osp.join(PRJ_DIR,'Dashboard','Figures','TSNE')\ntsne_pp_select   = pn.widgets.Select(name='Perplexity',        options=tsne_pps,          value=50, width=150)\ntsne_dist_select  = pn.widgets.Select(name='Distance Metric',  options=tsne_dist_metrics, value='correlation', width=150)\ntsne_m_select     = pn.widgets.Select(name='M',                options=[2,3,5,10,15,20,25,30],       value=2, width=150)\ntsne_alpha_select = pn.widgets.Select(name='Learning Rate',    options=tsne_alphas,       value=tsne_alphas[0], width=150)\ntsne_init_select  = pn.widgets.Select(name='Init Method',      options=tsne_inits,       value=tsne_inits[0], width=150)\ntsne_grcc_col_sel = pn.widgets.Select(name='[G-CC] Color By:', options=['Window Name','Subject'], value='Window Name', width=150)\ntsne_grpt_col_sel = pn.widgets.Select(name='[G-PT] Color By:', options=['Window Name','Subject'], value='Window Name', width=150)\ntsne_drop_xxxx    = pn.widgets.Checkbox(name='Drop Mixed Windows', width=150)\n\ntsne_conf_box     = pn.WidgetBox(tsne_dist_select,tsne_pp_select,tsne_init_select,tsne_m_select,tsne_alpha_select,tsne_grcc_col_sel,tsne_grpt_col_sel,tsne_drop_xxxx)\n\ntsne_LEFT_col     = pn.Column(tsne_conf_box)\n\n\n# -\n\n# #### 3. Plotting Functions\n\ndef plot_TSNE_scats(group_type,input_data,scenario,dist,pp,m,alpha,init_method,color_col,plot_2d_toolbar, drop_xxxx):\n    plots = None\n    aux_2d, aux_3d, aux_Md = None, None, None\n    if group_type in ['Procrustes','ALL']:\n        sitable_2d, sitable_3d, sitable_Md = pn.pane.DataFrame(pd.DataFrame(index=pd.Index(['Subject','Task'],name='Target'),columns=['SI']),width=150),pn.pane.DataFrame(pd.DataFrame(index=pd.Index(['Subject','Task'],name='Target'),columns=['SI']),width=150),pn.pane.DataFrame(pd.DataFrame(index=pd.Index(['Subject','Task'],name='Target'),columns=['SI']),width=150)\n    else:\n        sitable_2d, sitable_3d, sitable_Md = pn.pane.DataFrame(pd.DataFrame(index=pd.Index(['Task'],name='Target'),columns=['SI']),width=150),pn.pane.DataFrame(pd.DataFrame(index=pd.Index(['Task'],name='Target'),columns=['SI']),width=150),pn.pane.DataFrame(pd.DataFrame(index=pd.Index(['Task'],name='Target'),columns=['SI']),width=150)\n    # Load all necessary embeddings\n    # =============================\n    if m == 2:\n        aux_2d = load_single_tsne(group_type,input_data,scenario,dist,pp,alpha,init_method,2,drop_xxxx=drop_xxxx)\n    elif m == 3:\n        aux_2d = load_single_tsne(group_type,input_data,scenario,dist,pp,alpha,init_method,2,drop_xxxx=drop_xxxx)\n        aux_3d = load_single_tsne(group_type,input_data,scenario,dist,pp,alpha,init_method,3,drop_xxxx=drop_xxxx)\n    else:\n        aux_2d = load_single_tsne(group_type,input_data,scenario,dist,pp,alpha,init_method,2,drop_xxxx=drop_xxxx)\n        aux_3d = load_single_tsne(group_type,input_data,scenario,dist,pp,alpha,init_method,3,drop_xxxx=drop_xxxx)\n        aux_Md = load_single_tsne(group_type,input_data,scenario,dist,pp,alpha,init_method,m,drop_xxxx=drop_xxxx)\n    # Preprare Embeddings for plotting purposes\n    # =========================================\n    if not (aux_2d is None):\n        aux_2d = aux_2d.apply(zscore)\n        aux_2d = aux_2d.reset_index()\n    #     aux_2d = aux_2d.sort_index(level='Window Name',ascending=False) # So Inbetween are plotted in the back (for clarity)\n    if not (aux_3d is None):\n        aux_3d = aux_3d.apply(zscore)\n        aux_3d = aux_3d.reset_index()\n    #     aux_3d = aux_3d.sort_index(level='Window Name',ascending=False) # So Inbetween are plotted in the back (for clarity)\n    if not (aux_Md is None):\n        aux_Md = aux_Md.apply(zscore)\n        aux_Md = aux_Md.reset_index()\n    #     aux_Md = aux_Md.sort_index(level='Window Name',ascending=False) # So Inbetween are plotted in the back (for clarity)\n    # Prepare SI Tables\n    # =================\n    if (group_type,input_data,scenario,dist,pp,2,alpha,init_method) in si_TSNE.index:\n        sitable_2d = pn.pane.DataFrame(si_TSNE.loc[group_type,input_data,scenario,dist,pp,2,alpha,init_method].round(2),width=150)\n    if (group_type,input_data,scenario,dist,pp,3,alpha,init_method) in si_TSNE.index:\n        sitable_3d = pn.pane.DataFrame(si_TSNE.loc[group_type,input_data,scenario,dist,pp,3,alpha,init_method].round(2),width=150)\n    if (group_type,input_data,scenario,dist,pp,m,alpha,init_method) in si_TSNE.index:\n        sitable_Md = pn.pane.DataFrame(si_TSNE.loc[group_type,input_data,scenario,dist,pp,m,alpha,init_method].round(2),width=150)\n    # Prepare Color-scales\n    # ====================\n    if color_col == 'Subject':\n        cmap_2d = sbj_cmap_dict\n        cmap_3d = sbj_cmap_list\n    else:\n        cmap_2d = task_cmap\n        if not(aux_3d is None):\n            cmap_3d = [task_cmap[t] for t in aux_3d['Window Name'].unique()]    \n    # Plotting\n    # ========\n    if (not (aux_2d is None)) & (aux_3d is None):\n        plots = pn.GridBox(*[plot_2d_scatter(aux_2d,x='TSNE001',y='TSNE002',c=color_col, cmap=cmap_2d, s=10, toolbar=plot_2d_toolbar),sitable_2d],ncols=1)\n    if (not (aux_2d is None)) & (not (aux_3d is None)) & (aux_Md is None):\n        plots = pn.GridBox(*[plot_2d_scatter(aux_2d,x='TSNE001',y='TSNE002',c=color_col, cmap=cmap_2d, s=10, toolbar=plot_2d_toolbar),\n                             plot_3d_scatter(aux_3d,x='TSNE001',y='TSNE002',z='TSNE003',c=color_col, cmap=cmap_3d,s=3, ax_range=[-2,2]),\n                             sitable_2d, sitable_3d],ncols=2)\n    if (not (aux_2d is None)) & (not (aux_3d is None)) & (not (aux_Md is None)):\n        plots = pn.GridBox(*[plot_2d_scatter(aux_2d,x='TSNE001',y='TSNE002',c=color_col, cmap=cmap_2d, s=10, toolbar=plot_2d_toolbar),\n                             plot_3d_scatter(aux_3d,x='TSNE001',y='TSNE002',z='TSNE003',c=color_col, cmap=cmap_3d,s=3, ax_range=[-2,2]),\n                             plot_3d_scatter(aux_Md,x='TSNE001',y='TSNE002',z='TSNE003',c=color_col, cmap=cmap_3d,s=3, ax_range=[-2,2]),\n                             sitable_2d, sitable_3d, sitable_Md],ncols=3)\n    return plots\n\n\n@pn.depends(input_select,scenario_select,tsne_dist_select,tsne_pp_select,tsne_m_select,tsne_alpha_select,tsne_init_select,tsne_grpt_col_sel,plot2d_toolbar_select,tsne_drop_xxxx)\ndef plot_TSNE_Group_Procustes_scats(input_data,scenario,dist,pp,m,alpha,init_method,color_col,plot_2d_toolbar, drop_xxxx):\n    return plot_TSNE_scats('Procrustes',input_data,scenario,dist,pp,m,alpha,init_method,color_col,plot_2d_toolbar, drop_xxxx)\n@pn.depends(input_select,scenario_select,tsne_dist_select,tsne_pp_select,tsne_m_select,tsne_alpha_select,tsne_init_select,tsne_grcc_col_sel,plot2d_toolbar_select,tsne_drop_xxxx)\ndef plot_TSNE_Group_Concat_scats(input_data,scenario,dist,pp,m,alpha,init_method,color_col,plot_2d_toolbar,drop_xxxx):\n    return plot_TSNE_scats('ALL',input_data,scenario,dist,pp,m,alpha,init_method,color_col,plot_2d_toolbar, drop_xxxx)\n@pn.depends(sbj_select,input_select,scenario_select,tsne_dist_select,tsne_pp_select,tsne_m_select,tsne_alpha_select,tsne_init_select,plot2d_toolbar_select,tsne_drop_xxxx)\ndef plot_TSNE_Scan_scats(sbj,input_data,scenario,dist,pp,m,alpha,init_method,plot_2d_toolbar,drop_xxxx):\n    return plot_TSNE_scats(sbj,input_data,scenario,dist,pp,m,alpha,init_method,'Window Name',plot_2d_toolbar, drop_xxxx)\n\n\n# #### 4. Put the T-SNE Tab elements together\n\ntsne_embs_scan_card             = pn.layout.Card(plot_TSNE_Scan_scats,title='Scatter Plots - One Scan', width=825)\ntsne_embs_group_concat_card     = pn.layout.Card(plot_TSNE_Group_Concat_scats,title='Scatter Plots - Group Concatenation', width=825)\ntsne_embs_group_procrustes_card = pn.layout.Card(plot_TSNE_Group_Procustes_scats,title='Scatter Plots - Procrustes', width=825)\ntsne_embs_col = pn.Column(tsne_embs_scan_card,tsne_embs_group_concat_card,tsne_embs_group_procrustes_card)\n\ntsne_tab = pn.Row(tsne_LEFT_col,tsne_embs_col)\n\n# ***\n\n# Instantiate the template with widgets displayed in the sidebar\ntemplate = pn.template.FastListTemplate(\n    title="Manifold Learning for time-varying functional connectivity",\n    sidebar=[sbj_select,input_select,scenario_select,plot2d_toolbar_select],\n    header_color='#ffffff',\n    sidebar_width=200\n)\n\nintro_text = pn.pane.Markdown("""\nThis dashbaord allows you to explore time-vayring fMRI data embedded using three state-of-the-art techniques. It is a companion to a publications in Frontiers in Neuroscience that you can find [here](https://www.frontiersin.org/journals/human-neuroscience/articles/10.3389/fnhum.2023.1134012/full).\n""", width=1000)\ntemplate.main.append(pn.Column(intro_text,pn.Tabs(('Laplacian Eigenmaps',le_tab),('T-SNE',tsne_tab),('UMAP',umap_tab))))\n\ntemplate.servable()\n#dashboard = template.show(port=port_tunnel)\n\n\nawait write_doc()
  `

  try {
    const [docs_json, render_items, root_ids] = await self.pyodide.runPythonAsync(code)
    self.postMessage({
      type: 'render',
      docs_json: docs_json,
      render_items: render_items,
      root_ids: root_ids
    })
  } catch(e) {
    const traceback = `${e}`
    const tblines = traceback.split('\n')
    self.postMessage({
      type: 'status',
      msg: tblines[tblines.length-2]
    });
    throw e
  }
}

self.onmessage = async (event) => {
  const msg = event.data
  if (msg.type === 'rendered') {
    self.pyodide.runPythonAsync(`
    from panel.io.state import state
    from panel.io.pyodide import _link_docs_worker

    _link_docs_worker(state.curdoc, sendPatch, setter='js')
    `)
  } else if (msg.type === 'patch') {
    self.pyodide.globals.set('patch', msg.patch)
    self.pyodide.runPythonAsync(`
    from panel.io.pyodide import _convert_json_patch
    state.curdoc.apply_json_patch(_convert_json_patch(patch), setter='js')
    `)
    self.postMessage({type: 'idle'})
  } else if (msg.type === 'location') {
    self.pyodide.globals.set('location', msg.location)
    self.pyodide.runPythonAsync(`
    import json
    from panel.io.state import state
    from panel.util import edit_readonly
    if state.location:
        loc_data = json.loads(location)
        with edit_readonly(state.location):
            state.location.param.update({
                k: v for k, v in loc_data.items() if k in state.location.param
            })
    `)
  }
}

startApplication()