importScripts("https://cdn.jsdelivr.net/pyodide/v0.27.0/full/pyodide.js");

function sendPatch(patch, buffers, msg_id) {
  self.postMessage({
    type: 'patch',
    patch: patch,
    buffers: buffers
  })
}

async function startApplication() {
  console.log("Loading pyodide!");
  self.postMessage({type: 'status', msg: 'Loading pyodide'})
  self.pyodide = await loadPyodide();
  self.pyodide.globals.set("sendPatch", sendPatch);
  console.log("Loaded!");
  await self.pyodide.loadPackage("micropip");
  const env_spec = ['https://cdn.holoviz.org/panel/wheels/bokeh-3.6.2-py3-none-any.whl', 'https://cdn.holoviz.org/panel/1.6.0/dist/wheels/panel-1.6.0-py3-none-any.whl', 'pyodide-http==0.2.1', 'hvplot', 'numpy', 'pandas', 'plotly', 'scipy']
  for (const pkg of env_spec) {
    let pkg_name;
    if (pkg.endsWith('.whl')) {
      pkg_name = pkg.split('/').slice(-1)[0].split('-')[0]
    } else {
      pkg_name = pkg
    }
    self.postMessage({type: 'status', msg: `Installing ${pkg_name}`})
    try {
      await self.pyodide.runPythonAsync(`
        import micropip
        await micropip.install('${pkg}');
      `);
    } catch(e) {
      console.log(e)
      self.postMessage({
	type: 'status',
	msg: `Error while installing ${pkg_name}`
      });
    }
  }
  console.log("Packages loaded!");
  self.postMessage({type: 'status', msg: 'Executing code'})
  const code = `
  \nimport asyncio\n\nfrom panel.io.pyodide import init_doc, write_doc\n\ninit_doc()\n\n# ---\n# jupyter:\n#   jupytext:\n#     formats: ipynb,py:light\n#     text_representation:\n#       extension: .py\n#       format_name: light\n#       format_version: '1.5'\n#       jupytext_version: 1.15.2\n#   kernelspec:\n#     display_name: opentsne_panel14\n#     language: python\n#     name: opentsne_panel14\n# ---\n\nimport panel as pn\nimport numpy as np\nimport os.path as osp\nimport pandas as pd\nfrom scipy.stats import zscore\n#from matplotlib.colors import rgb2hex\n#import matplotlib\nimport hvplot.pandas\n#import plotly\n#pn.extension('plotly')\nimport plotly.express as px\n\n# +\n# #cd /data/SFIMJGC_HCP7T/manifold_learning_fmri/Notebooks\n#panel convert GUI_Embeddings_toDeploy.py --to pyodide-worker --out ../docs/ --pwa --title manifold_fmri\n# -\n\n# So far we are working with these values of wls and wss across the whole manuscript\nwls = 45\nwss = 1.5\nmin_dist = 0.8\n\n# +\nDATA_URL = 'https://raw.githubusercontent.com/nimh-sfim/manifold_learning_fmri_demo_data/master/data/'\n\n# Available scans\navail_scans_dict = {'Scan 1':'SBJ06', 'Scan 2':'SBJ07'}\n\n# Available Data Scenarios\ninput_data_dict = {'Real Data':'Original','Connectivity Randomization':'Null_ConnRand','Phase Randomization':'Null_PhaseRand'}\n\n# Normalization Options\nnormalization_dict = {'Do not normalize':'asis','Z-score':'zscored'}\n\n# Colormaps\n#sbj_cmap_list = [rgb2hex(c) for c in matplotlib.colormaps['tab20'].colors]\n# Hard coded below to avoid importing matplotlib\nsbj_cmap_list = ['#1f77b4','#aec7e8','#ff7f0e','#ffbb78','#2ca02c','#98df8a','#d62728','#ff9896','#9467bd','#c5b0d5','#8c564b','#c49c94','#e377c2','#f7b6d2','#7f7f7f','#c7c7c7','#bcbd22','#dbdb8d','#17becf','#9edae5']\nsbj_cmap = {v:sbj_cmap_list[i] for i,v in enumerate(avail_scans_dict.values())}\ntask_cmap = {'Rest': 'gray', 'Memory': 'blue', 'Vis. Motion':  '#F4D03F',  'Matemathics': 'green', 'Mixed Tasks': 'pink'}\n#task_cmap = {'REST': 'gray', 'BACK': 'blue',   'VIDE':  '#F4D03F',  'MATH': 'green', 'XXXX': 'pink'}\n\n# Laplacian Eigenmap related options\nle_dist_metrics = {'Euclidean Distance':'euclidean','Correlation Distance':'correlation','Cosine Distance':'cosine'}\nle_knns         = [int(i) for i in np.linspace(start=5, stop=200, num=40)][::5]\nle_ms           = [2,3,5,10,15]\n\n# UMAP related options\numap_dist_metrics = le_dist_metrics\numap_knns         = [int(i) for i in np.linspace(start=5, stop=200, num=40)][::5]\numap_ms           = [2,3,5,10]\numap_alphas       = [0.01, 1.0]\numap_inits        = ['spectral']\n\n# T-SNE related options\ntsne_dist_metrics = le_dist_metrics\ntsne_pps          = [5,50,100,150]\ntsne_ms           = [2,3,5,10]\ntsne_alphas       = [10, 50, 100, 1000]\ntsne_inits        = ['pca']\n# -\n\n# ***\n# ### Functions from utils.plotting\n\ncamera = dict(up=dict(x=0, y=0, z=1), center=dict(x=0, y=0, z=0), eye=dict(x=0, y=1, z=1)) \n\n\ndef plot_2d_scatter(data,x,y,c,cmap=task_cmap, show_frame=True, s=2, alpha=0.3, toolbar=None, \n                    legend=True, xaxis=False, xlabel='', yaxis=False, ylabel='', frame_width=250, shared_axes=False):\n    plot = data.hvplot.scatter(x=x,y=y,c=c, cmap=cmap, \n                               aspect='square', s=s, alpha=alpha, \n                               legend=legend, xaxis=xaxis, \n                               yaxis=yaxis, frame_width=frame_width, shared_axes=shared_axes).opts(toolbar=toolbar, show_frame=show_frame, tools=[], legend_position='left')\n    return plot\n\n\ndef plot_3d_scatter(data,x,y,z,c,cmap,s=2,width=350, height=300, ax_range=[-.005,.005],nticks=4):\n    fig = px.scatter_3d(data,\n                        x=x,y=y,z=z, \n                        width=width, height=height, \n                        opacity=0.3, color=c,color_discrete_sequence=cmap)\n    scene_extra_confs = dict(\n        xaxis = dict(nticks=nticks, range=ax_range, gridcolor="black", showbackground=True, zerolinecolor="black",backgroundcolor='rgb(230,230,230)'),\n        yaxis = dict(nticks=nticks, range=ax_range, gridcolor="black", showbackground=True, zerolinecolor="black",backgroundcolor='rgb(230,230,230)'),\n        zaxis = dict(nticks=nticks, range=ax_range, gridcolor="black", showbackground=True, zerolinecolor="black",backgroundcolor='rgb(230,230,230)'))\n    fig.update_traces(marker_size = s)\n    fig.update_layout(showlegend=False, font_color='white',title = dict(text="TITLE"),\n                      scene_camera=camera, scene=scene_extra_confs, margin=dict(l=0, r=0, b=0, t=0))\n    return fig\n\n\n# ***\n# ### Functions from utils.io\n\ndef load_single_le(sbj,input_data,scenario,dist,knn,m,wls=45,wss=1.5, drop_xxxx=True, show_path=False):\n\n    new_label_dict = {'REST':'Rest','VIDE':'Vis. Motion','BACK':'Memory','MATH':'Matemathics','XXXX':'Mixed Tasks'}\n\n    path = osp.join(DATA_URL,'embeddings',sbj,'LE',input_data,\n                    '{sbj}_Craddock_0200.WL{wls}s.WS{wss}s.LE_{dist}_k{knn}_m{m}.{scenario}.pkl'.format(sbj=sbj,scenario=scenario,wls=str(int(wls)).zfill(3),wss=str(wss),\n                                                                                                        dist=dist,knn=str(knn).zfill(4),m=str(m).zfill(4)))\n    try:\n        aux = pd.read_pickle(path)\n    except:\n        return None\n    if drop_xxxx:\n        if type(aux.index) is pd.MultiIndex:\n            aux = aux.drop('XXXX', level='Window Name')\n        else:\n            aux = aux.drop('XXXX',axis=0)\n    aux.index = [new_label_dict[i] for i in aux.index]\n    aux.index.name = 'Task'\n    return aux\n\n\ndef load_single_tsne(sbj,input_data,scenario,dist,pp,alpha,init_method,m,wls=45,wss=1.5, drop_xxxx=True):\n    new_label_dict = {'REST':'Rest','VIDE':'Vis. Motion','BACK':'Memory','MATH':'Matemathics','XXXX':'Mixed Tasks'}\n    path = osp.join(DATA_URL,'embeddings',sbj,'TSNE',input_data,'{sbj}_Craddock_0200.WL{wls}s.WS{wss}s.TSNE_{dist}_pp{pp}_m{m}_a{alpha}_{init_method}.{scenario}.pkl'.format(scenario=scenario,\n                                                                                                init_method=init_method,sbj=sbj,wls=str(int(wls)).zfill(3),wss=str(wss),\n                                                                                                dist=dist,pp=str(pp).zfill(4),m=str(m).zfill(4),alpha=str(alpha)))\n    try:\n        aux = pd.read_pickle(path)\n    except:\n        return None\n    if drop_xxxx:\n        if type(aux.index) is pd.MultiIndex:\n            aux = aux.drop('XXXX', level='Window Name')\n        else:\n            aux = aux.drop('XXXX',axis=0)\n    aux.index = [new_label_dict[i] for i in aux.index]\n    aux.index.name = 'Task'\n    return aux\n\n\ndef load_single_umap(sbj,input_data,scenario,dist,knn,alpha,init_method,min_dist,m,wls=45,wss=1.5, drop_xxxx=True):\n    new_label_dict = {'REST':'Rest','VIDE':'Vis. Motion','BACK':'Memory','MATH':'Matemathics','XXXX':'Mixed Tasks'}\n    path = osp.join(DATA_URL,'embeddings',sbj,'UMAP',input_data,\n                    '{sbj}_Craddock_0200.WL{wls}s.WS{wss}s.UMAP_{dist}_k{knn}_m{m}_md{min_dist}_a{alpha}_{init_method}.{scenario}.pkl'.format(scenario=scenario,        \n                                                                                                init_method=init_method,sbj=sbj,wls=str(int(wls)).zfill(3),wss=str(wss),\n                                                                                                dist=dist,knn=str(knn).zfill(4),m=str(m).zfill(4),min_dist=str(min_dist),\n                                                                                                                                                   alpha=str(alpha)))\n    try:\n        aux = pd.read_pickle(path)\n    except:\n        return None\n    if drop_xxxx:\n        if type(aux.index) is pd.MultiIndex:\n            aux = aux.drop('XXXX', level='Window Name')\n        else:\n            aux = aux.drop('XXXX',axis=0)\n    aux.index = [new_label_dict[i] for i in aux.index]\n    aux.index.name = 'Task'\n    return aux\n\n\n# ***\n# # Main Dashboard Panel: Configuration Options\n\nsidebar_desc = pn.pane.Markdown('#### Use these widgets to select input data entering the embedding estimation', width=200)\nsbj_select      = pn.widgets.Select(name='fMRI Scan',     options=avail_scans_dict,  width=150, description='Select the scan you want to explore')\ninput_select    = pn.widgets.Select(name='Scenario',      options=input_data_dict,    width=150, description='Select original data or null data (phase or connection randomized)')\nscenario_select = pn.widgets.Select(name='Normalization', options=normalization_dict, width=150,description='Select whether or not to normalize data prior to embedding estimation')\nsidebar_divider = pn.layout.Divider()\nsidebar_todo    = pn.pane.Markdown("""#### Things you can do:\n1. See the effects of metric and neighborhood in embedding quality by selecting different m and knn values.\n2. Get a feeling for inter-subject variability by comparing results across different scans.\n3. Check how randomizing connections or the phase of timeseries affect the embeddings. For this use the scenario select widget above.\n4. Explore differences across Manifold Learning methods when keeping the input data unchanged.\n""")\n\n# ***\n# # Laplacian Eigenmaps\n\n# #### 1. Load Silhouette Index for LE\n\nsi_LE_URL = osp.join(DATA_URL,'sil_index','si_LE.pkl')\nsi_LE = pd.read_pickle(si_LE_URL)\n\n# #### 3. LE Tab Elements\n\nCSS = """\ninput {\n    height: 15px;\n    width: 15px;\n}\nspan {\n    font-size: 16px;\n}\n"""\nle_m_select     = pn.widgets.Select(name='M',   options=le_ms, value=le_ms[-1], width=150, description='Number of dimensions used for computing the left-most embedding (independently of M, the plot will only show the first three dimensions)')\nle_knn_select   = pn.widgets.Select(name='Knn', options=le_knns,         value=le_knns[0], width=150, description='Neighborhood Size for Laplacian Embeddings')\nle_dist_select  = pn.widgets.Select(name='Distance Metric', options=le_dist_metrics, width=150,description='Distance metric used when computing Laplacian Embeddings')\nle_drop_xxxx    = pn.widgets.Checkbox(name='Drop Mixed Windows?', width=300, align=('center','center'), margin=(27,15),stylesheets=[CSS])\nle_conf_box     = pn.Row(le_dist_select,le_knn_select,le_m_select,le_drop_xxxx)\n\n\ndef plot_LE_scats(group_type,input_data,scenario,dist,knn,m,color_col,plot_2d_toolbar,drop_xxxx):\n    plots = None\n    aux_2d, aux_3d, aux_Md = None, None, None\n   # Load all necessary embeddings\n    # =============================\n    if m == 2:\n        aux_2d = load_single_le(group_type,input_data,scenario,dist,knn,2,drop_xxxx=drop_xxxx)\n    elif m == 3:\n        aux_2d = load_single_le(group_type,input_data,scenario,dist,knn,2,drop_xxxx=drop_xxxx)\n        aux_3d = load_single_le(group_type,input_data,scenario,dist,knn,3,drop_xxxx=drop_xxxx)\n    else:\n        aux_2d = load_single_le(group_type,input_data,scenario,dist,knn,2,drop_xxxx=drop_xxxx)\n        aux_3d = load_single_le(group_type,input_data,scenario,dist,knn,3,drop_xxxx=drop_xxxx)\n        aux_Md = load_single_le(group_type,input_data,scenario,dist,knn,m,drop_xxxx=drop_xxxx)\n    # Preprare Embeddings\n    # ===================\n    if not (aux_2d is None):\n        aux_2d = aux_2d.apply(zscore)\n        aux_2d = aux_2d.reset_index()\n        \n    if not (aux_3d is None):\n         aux_3d = aux_3d.apply(zscore)\n         aux_3d = aux_3d.reset_index()\n\n    if not (aux_Md is None):\n         aux_Md = aux_Md.apply(zscore)\n         aux_Md = aux_Md.reset_index()\n    # Prepare Color-scales\n    # ====================\n    if color_col == 'Subject':\n        cmap_2d = sbj_cmap\n        cmap_3d = sbj_cmap_list\n    else:\n        cmap_2d = task_cmap\n        if not(aux_3d is None):\n            cmap_3d = [task_cmap[t] for t in aux_3d['Task'].unique()]\n\n    # Plotting\n    # ========\n    cols_width = 400\n    if (not (aux_2d is None)) & (aux_3d is None):\n        col_title_2d = pn.pane.Markdown("## 2D Embedding | <a href='https://en.wikipedia.org/wiki/Silhouette_(clustering)' target='_blank'>SI</a>=%.2f" % si_LE.loc[group_type,input_data,scenario,dist,knn,2,'Task']['SI'].item())\n        emb_plot_2d  = plot_2d_scatter(aux_2d,x='LE001',y='LE002',c=color_col, cmap=cmap_2d, s=10, toolbar=plot_2d_toolbar)\n        plots = pn.Row(pn.Column(col_title_2d,emb_plot_2d),None,None)\n    if (not (aux_2d is None)) & (not (aux_3d is None)) & (aux_Md is None):\n        col_title_2d = pn.pane.Markdown("## 2D Embedding | <a href='https://en.wikipedia.org/wiki/Silhouette_(clustering)' target='_blank'>SI</a>=%.2f" % si_LE.loc[group_type,input_data,scenario,dist,knn,2,'Task']['SI'].item())\n        emb_plot_2d  = plot_2d_scatter(aux_2d,x='LE001',y='LE002',c=color_col, cmap=cmap_2d, s=10, toolbar=plot_2d_toolbar)\n        col_title_3d = pn.pane.Markdown("## 3D Embedding | <a href='https://en.wikipedia.org/wiki/Silhouette_(clustering)' target='_blank'>SI</a>=%.2f" % si_LE.loc[group_type,input_data,scenario,dist,knn,3,'Task']['SI'].item())\n        emb_plot_3d  = plot_3d_scatter(aux_3d,x='LE001',y='LE002',z='LE003',c=color_col, cmap=cmap_3d,s=3, ax_range=[aux_3d.min(),aux_3d.max()])\n        plots = pn.Row(pn.Column(col_title_2d,emb_plot_2d), pn.Column(col_title_3d,emb_plot_3d),None)\n    if (not (aux_2d is None)) & (not (aux_3d is None)) & (not (aux_Md is None)):\n        col_title_2d = pn.pane.Markdown("## 2D Embedding | <a href='https://en.wikipedia.org/wiki/Silhouette_(clustering)' target='_blank'>SI</a>=%.2f" % si_LE.loc[group_type,input_data,scenario,dist,knn,2,'Task']['SI'].item())\n        emb_plot_2d  = plot_2d_scatter(aux_2d,x='LE001',y='LE002',c=color_col, cmap=cmap_2d, s=10, toolbar=plot_2d_toolbar)\n        col_title_3d = pn.pane.Markdown("## 3D Embedding | <a href='https://en.wikipedia.org/wiki/Silhouette_(clustering)' target='_blank'>SI</a>=%.2f" % si_LE.loc[group_type,input_data,scenario,dist,knn,3,'Task']['SI'].item())\n        emb_plot_3d  = plot_3d_scatter(aux_3d,x='LE001',y='LE002',z='LE003',c=color_col, cmap=cmap_3d,s=3, ax_range=[aux_3d.min(),aux_3d.max()])\n        col_title_Md = pn.pane.Markdown("## 3D View of %d-D Embedding | <a href='https://en.wikipedia.org/wiki/Silhouette_(clustering)' target='_blank'>SI</a>=%.2f" % (m,si_LE.loc[group_type,input_data,scenario,dist,knn,m,'Task']['SI'].item()))\n        emb_plot_Md  = plot_3d_scatter(aux_Md,x='LE001',y='LE002',z='LE003',c=color_col, cmap=cmap_3d,s=3, ax_range=[aux_Md.min(),aux_Md.max()])\n        plots = pn.GridBox(*[col_title_2d,col_title_3d,col_title_Md,\n                             emb_plot_2d,emb_plot_3d,emb_plot_Md],ncols=3)\n    return plots\n\n\n@pn.depends(sbj_select,input_select,scenario_select,le_dist_select,le_knn_select,le_m_select,le_drop_xxxx)\ndef plot_LE_Scan_scats(sbj,input_data,scenario,dist,knn,m, drop_xxxx):\n    return plot_LE_scats(sbj,input_data,scenario,dist,knn,m,'Task','above',drop_xxxx)\n\n\nle_config_card                = pn.Row(le_conf_box)\nle_embs_scan_card             = pn.layout.Card(plot_LE_Scan_scats,title='Laplacian Eigenmaps - Single fMRI Scan', width=1200, header_background='#0072B5', header_color='#ffffff')\nle_embs_col = pn.Column(le_embs_scan_card)\n\nle_tab=pn.Column(le_config_card,le_embs_col)\n\n# ***\n# # UMAP\n# #### 1. Load Silhouette Index for UMAP\n#\n# Hyper-parameter space: 3 Inputs * 2 Norm Approach * 8 m * 3 dist * x knns * 3 alphas = \n# * "Concat + UMAP": 17280 entries\n# * "UMAP + Procrustes": 17280 entries\n# * Single-Scan Level: 345600 entries\n\nsi_UMAP = pd.read_pickle(osp.join(DATA_URL,'sil_index','si_UMAP.pkl'))\n\n# #### 3. UMAP Tab Elements\n\n# +\numap_knn_select   = pn.widgets.Select(name='Knn',             options=umap_knns,         value=umap_knns[0], width=150, description='Select a neighborhood size for UMAP.')\numap_dist_select  = pn.widgets.Select(name='Distance Metric', options=umap_dist_metrics, width=150, description='Select a distance metric for UMAP.')\numap_m_select     = pn.widgets.Select(name='M',   options=umap_ms,           value=umap_ms[0], width=150, description='Select the number of dimensions for UMAP.')\numap_alpha_select = pn.widgets.Select(name='Learning Rate',   options=umap_alphas,       value=umap_alphas[0], width=150, description='Select a learning rate for UMAP.')\numap_init_select  = pn.widgets.Select(name='Init Method',     options=['spectral'],        value='spectral', width=150, description='Initialization method set to spectral.')\numap_mdist_select = pn.widgets.Select(name='Minimum Distance', options=[0.8],            value=0.8, width=150, description='Select a minimum distance for UMAP.')\numap_drop_xxxx    = pn.widgets.Checkbox(name='Drop Mixed Windows?', width=300, align=('center','center'), margin=(27,15),stylesheets=[CSS])\n\numap_conf_box     = pn.Row(umap_dist_select,umap_knn_select,umap_init_select,umap_m_select,umap_alpha_select,umap_mdist_select,umap_drop_xxxx)\n\numap_LEFT_col     = pn.Column(umap_conf_box)\n\n\n# -\n\n# #### 3. Plotting Functions            \n\ndef plot_UMAP_scats(group_type,input_data,scenario,dist,knn,m,alpha,init_method,min_dist,color_col,plot_2d_toolbar,drop_xxxx):\n    plots = None\n    aux_2d, aux_3d, aux_Md = None, None, None\n    if group_type in ['Procrustes','ALL']:\n        sitable_2d, sitable_3d, sitable_Md = pn.pane.DataFrame(pd.DataFrame(index=pd.Index(['Subject','Task'],name='Target'),columns=['SI']),width=150),pn.pane.DataFrame(pd.DataFrame(index=pd.Index(['Subject','Task'],name='Target'),columns=['SI']),width=150),pn.pane.DataFrame(pd.DataFrame(index=pd.Index(['Subject','Task'],name='Target'),columns=['SI']),width=150)\n    else:\n        sitable_2d, sitable_3d, sitable_Md = pn.pane.DataFrame(pd.DataFrame(index=pd.Index(['Task'],name='Target'),columns=['SI']),width=150),pn.pane.DataFrame(pd.DataFrame(index=pd.Index(['Task'],name='Target'),columns=['SI']),width=150),pn.pane.DataFrame(pd.DataFrame(index=pd.Index(['Task'],name='Target'),columns=['SI']),width=150)\n    # Load all necessary embeddings\n    # =============================\n    if m == 2:\n        aux_2d = load_single_umap(group_type,input_data,scenario,dist,knn,alpha,init_method,min_dist,2,drop_xxxx=drop_xxxx)\n    elif m == 3:\n        aux_2d = load_single_umap(group_type,input_data,scenario,dist,knn,alpha,init_method,min_dist,2,drop_xxxx=drop_xxxx)\n        aux_3d = load_single_umap(group_type,input_data,scenario,dist,knn,alpha,init_method,min_dist,3,drop_xxxx=drop_xxxx)\n    else:\n        aux_2d = load_single_umap(group_type,input_data,scenario,dist,knn,alpha,init_method,min_dist,2,drop_xxxx=drop_xxxx)\n        aux_3d = load_single_umap(group_type,input_data,scenario,dist,knn,alpha,init_method,min_dist,3,drop_xxxx=drop_xxxx)\n        aux_Md = load_single_umap(group_type,input_data,scenario,dist,knn,alpha,init_method,min_dist,m,drop_xxxx=drop_xxxx)\n    # Preprare Embeddings\n    # ===================\n    if not (aux_2d is None):\n         aux_2d = aux_2d.apply(zscore)\n         aux_2d = aux_2d.reset_index()\n    if not (aux_3d is None):\n         aux_3d = aux_3d.apply(zscore)\n         aux_3d = aux_3d.reset_index()\n    if not (aux_Md is None):\n         aux_Md = aux_Md.apply(zscore)\n         aux_Md = aux_Md.reset_index()\n    # Prepare SI Tables\n    # =================\n    if (group_type,input_data,scenario,init_method,min_dist,dist,knn,alpha,2) in si_UMAP.index:\n        sitable_2d = pn.pane.DataFrame(si_UMAP.loc[group_type,input_data,scenario,init_method,min_dist,dist,knn,alpha,2].round(2),width=150)\n    if (group_type,input_data,scenario,init_method,min_dist,dist,knn,alpha,3) in si_UMAP.index:\n        sitable_3d = pn.pane.DataFrame(si_UMAP.loc[group_type,input_data,scenario,init_method,min_dist,dist,knn,alpha,3].round(2),width=150)\n    if (group_type,input_data,scenario,init_method,min_dist,dist,knn,alpha,m) in si_UMAP.index:\n        sitable_Md = pn.pane.DataFrame(si_UMAP.loc[group_type,input_data,scenario,init_method,min_dist,dist,knn,alpha,m].round(2),width=150)\n    # Prepare Color-scales\n    # ====================\n    if color_col == 'Subject':\n        cmap_2d = sbj_cmap_dict\n        cmap_3d = sbj_cmap_list\n    else:\n        cmap_2d = task_cmap\n        if not(aux_3d is None):\n            cmap_3d = [task_cmap[t] for t in aux_3d['Task'].unique()]\n    # Plotting\n    # ========\n    cols_width = 400\n    if (not (aux_2d is None)) & (aux_3d is None):\n        si_UMAP_2d   = si_UMAP.loc[group_type,input_data,scenario,init_method,min_dist,dist,knn,alpha,2,'Task'].round(2).item()\n        col_title_2d = pn.pane.Markdown("## 2D Embedding | <a href='https://en.wikipedia.org/wiki/Silhouette_(clustering)' target='_blank'>SI</a>=%.2f" % si_UMAP_2d)\n        emb_plot_2d  = plot_2d_scatter(aux_2d,x='UMAP001',y='UMAP002',c=color_col, cmap=cmap_2d, s=10, toolbar=plot_2d_toolbar)\n        plots = pn.Row(pn.Column(col_title_2d,emb_plot_2d),None,None)\n    if (not (aux_2d is None)) & (not (aux_3d is None)) & (aux_Md is None):\n        si_UMAP_2d   = si_UMAP.loc[group_type,input_data,scenario,init_method,min_dist,dist,knn,alpha,2,'Task'].round(2).item()\n        si_UMAP_3d   = si_UMAP.loc[group_type,input_data,scenario,init_method,min_dist,dist,knn,alpha,3,'Task'].round(2).item()\n        col_title_2d = pn.pane.Markdown("## 2D Embedding | <a href='https://en.wikipedia.org/wiki/Silhouette_(clustering)' target='_blank'>SI</a>=%.2f" % si_UMAP_2d)\n        emb_plot_2d  = plot_2d_scatter(aux_2d,x='UMAP001',y='UMAP002',c=color_col, cmap=cmap_2d, s=10, toolbar=plot_2d_toolbar)\n        col_title_3d = pn.pane.Markdown("## 3D Embedding | <a href='https://en.wikipedia.org/wiki/Silhouette_(clustering)' target='_blank'>SI</a>=%.2f" % si_UMAP_3d)\n        emb_plot_3d  = plot_3d_scatter(aux_3d,x='UMAP001',y='UMAP002',z='UMAP003',c=color_col, cmap=cmap_3d,s=3, ax_range=[aux_3d.min(),aux_3d.max()])\n        plots = pn.Row(pn.Column(col_title_2d,emb_plot_2d), pn.Column(col_title_3d,emb_plot_3d),None)\n    if (not (aux_2d is None)) & (not (aux_3d is None)) & (not (aux_Md is None)):\n        si_UMAP_2d   = si_UMAP.loc[group_type,input_data,scenario,init_method,min_dist,dist,knn,alpha,2,'Task'].round(2).item()\n        si_UMAP_3d   = si_UMAP.loc[group_type,input_data,scenario,init_method,min_dist,dist,knn,alpha,3,'Task'].round(2).item()\n        si_UMAP_Md   = si_UMAP.loc[group_type,input_data,scenario,init_method,min_dist,dist,knn,alpha,m,'Task'].round(2).item()\n        col_title_2d = pn.pane.Markdown("## 2D Embedding | <a href='https://en.wikipedia.org/wiki/Silhouette_(clustering)' target='_blank'>SI</a>=%.2f" % si_UMAP_2d)\n        emb_plot_2d  = plot_2d_scatter(aux_2d,x='UMAP001',y='UMAP002',c=color_col, cmap=cmap_2d, s=10, toolbar=plot_2d_toolbar)\n        col_title_3d = pn.pane.Markdown("## 3D Embedding | <a href='https://en.wikipedia.org/wiki/Silhouette_(clustering)' target='_blank'>SI</a>=%.2f" % si_UMAP_3d)\n        emb_plot_3d  = plot_3d_scatter(aux_3d,x='UMAP001',y='UMAP002',z='UMAP003',c=color_col, cmap=cmap_3d,s=3, ax_range=[aux_3d.min(),aux_3d.max()])\n        col_title_Md = pn.pane.Markdown("## 3D View of %d-D Embedding | <a href='https://en.wikipedia.org/wiki/Silhouette_(clustering)' target='_blank'>SI</a>=%.2f" % (m,si_UMAP_Md))\n        emb_plot_Md  = plot_3d_scatter(aux_Md,x='UMAP001',y='UMAP002',z='UMAP003',c=color_col, cmap=cmap_3d,s=3, ax_range=[aux_Md.min(),aux_Md.max()])\n        plots = pn.GridBox(*[col_title_2d,col_title_3d,col_title_Md,\n                             emb_plot_2d,emb_plot_3d,emb_plot_Md],ncols=3)\n    return plots\n\n\n@pn.depends(sbj_select,input_select,scenario_select,umap_dist_select,umap_knn_select,umap_m_select,umap_alpha_select,umap_init_select,umap_mdist_select,umap_drop_xxxx)\ndef plot_UMAP_Scan_scats(sbj,input_data,scenario,dist,knn,m,alpha,init_method,min_dist,drop_xxxx):\n    return plot_UMAP_scats(sbj,input_data,scenario,dist,knn,m,alpha,init_method,min_dist,'Task','above',drop_xxxx)\n\n\n# #### 4. Constructing UMAP Tab with all elements\n\numap_embs_scan_card             = pn.layout.Card(plot_UMAP_Scan_scats,title='UMAP Embeddings - Single fMRI Scan', width=1200, header_background='#0072B5', header_color='#ffffff')\numap_embs_col = pn.Column(umap_embs_scan_card)\n\numap_tab = pn.Column(umap_LEFT_col,umap_embs_col)\n\n# ***\n# # TSNE\n# #### 1. Load Silhouette Index for TSNE\n\nsi_TSNE_URL = osp.join(DATA_URL,'sil_index','si_TSNE.pkl')\nsi_TSNE = pd.read_pickle(si_TSNE_URL)\n\n# #### 2. TSNE Tab Elements\n\n# +\ntsne_pp_select   = pn.widgets.Select(name='Perplexity',        options=tsne_pps,          value=50, width=150, description='Choose the desired perplexity, which is similar to the neighborhood size.')\ntsne_dist_select  = pn.widgets.Select(name='Distance Metric',  options=tsne_dist_metrics, value='correlation', width=150, description='Choose a distance metric.')\ntsne_m_select     = pn.widgets.Select(name='M',                options=tsne_ms,       value=2, width=150, description='Number of dimensions used during embedding estimation')\ntsne_alpha_select = pn.widgets.Select(name='Learning Rate',    options=tsne_alphas,       value=tsne_alphas[0], width=150, description='Choose the learning rate')\ntsne_init_select  = pn.widgets.Select(name='Init Method',      options=tsne_inits,       value=tsne_inits[0], width=150, description='We always initialize using the PCA method')\ntsne_drop_xxxx    = pn.widgets.Checkbox(name='Drop Mixed Windows?', width=300, align=('center','center'), margin=(27,15),stylesheets=[CSS])\n\ntsne_conf_box     = pn.Row(tsne_dist_select,tsne_pp_select,tsne_init_select,tsne_m_select,tsne_alpha_select,tsne_drop_xxxx)\ntsne_LEFT_col     = pn.Row(tsne_conf_box)\n\n\n# -\n\n# #### 3. Plotting Functions\n\ndef plot_TSNE_scats(group_type,input_data,scenario,dist,pp,m,alpha,init_method,color_col,plot_2d_toolbar, drop_xxxx):\n    plots = None\n    aux_2d, aux_3d, aux_Md = None, None, None\n    if group_type in ['Procrustes','ALL']:\n        sitable_2d, sitable_3d, sitable_Md = pn.pane.DataFrame(pd.DataFrame(index=pd.Index(['Subject','Task'],name='Target'),columns=['SI']),width=150),pn.pane.DataFrame(pd.DataFrame(index=pd.Index(['Subject','Task'],name='Target'),columns=['SI']),width=150),pn.pane.DataFrame(pd.DataFrame(index=pd.Index(['Subject','Task'],name='Target'),columns=['SI']),width=150)\n    else:\n        sitable_2d, sitable_3d, sitable_Md = pn.pane.DataFrame(pd.DataFrame(index=pd.Index(['Task'],name='Target'),columns=['SI']),width=150),pn.pane.DataFrame(pd.DataFrame(index=pd.Index(['Task'],name='Target'),columns=['SI']),width=150),pn.pane.DataFrame(pd.DataFrame(index=pd.Index(['Task'],name='Target'),columns=['SI']),width=150)\n    # Load all necessary embeddings\n    # =============================\n    if m == 2:\n        aux_2d = load_single_tsne(group_type,input_data,scenario,dist,pp,alpha,init_method,2,drop_xxxx=drop_xxxx)\n    elif m == 3:\n        aux_2d = load_single_tsne(group_type,input_data,scenario,dist,pp,alpha,init_method,2,drop_xxxx=drop_xxxx)\n        aux_3d = load_single_tsne(group_type,input_data,scenario,dist,pp,alpha,init_method,3,drop_xxxx=drop_xxxx)\n    else:\n        aux_2d = load_single_tsne(group_type,input_data,scenario,dist,pp,alpha,init_method,2,drop_xxxx=drop_xxxx)\n        aux_3d = load_single_tsne(group_type,input_data,scenario,dist,pp,alpha,init_method,3,drop_xxxx=drop_xxxx)\n        aux_Md = load_single_tsne(group_type,input_data,scenario,dist,pp,alpha,init_method,m,drop_xxxx=drop_xxxx)\n    # Preprare Embeddings for plotting purposes\n    # =========================================\n    if not (aux_2d is None):\n        aux_2d = aux_2d.apply(zscore)\n        aux_2d = aux_2d.reset_index()\n    if not (aux_3d is None):\n        aux_3d = aux_3d.apply(zscore)\n        aux_3d = aux_3d.reset_index()\n    if not (aux_Md is None):\n        aux_Md = aux_Md.apply(zscore)\n        aux_Md = aux_Md.reset_index()\n    # Prepare Color-scales\n    # ====================\n    if color_col == 'Subject':\n        cmap_2d = sbj_cmap_dict\n        cmap_3d = sbj_cmap_list\n    else:\n        cmap_2d = task_cmap\n        if not(aux_3d is None):\n            cmap_3d = [task_cmap[t] for t in aux_3d['Task'].unique()]    \n    # Plotting\n    # ========\n     # Plotting\n    # ========\n    cols_width = 400\n    if (not (aux_2d is None)) & (aux_3d is None):\n        si_tsne_2d   = si_TSNE.loc[group_type,input_data,scenario,dist,pp,2,alpha,init_method,'Task'].round(2).item()\n        col_title_2d = pn.pane.Markdown("## 2D Embedding | <a href='https://en.wikipedia.org/wiki/Silhouette_(clustering)' target='_blank'>SI</a>=%.2f" % si_tsne_2d)\n        emb_plot_2d  = plot_2d_scatter(aux_2d,x='TSNE001',y='TSNE002',c=color_col, cmap=cmap_2d, s=10, toolbar=plot_2d_toolbar)\n        plots = pn.Row(pn.Column(col_title_2d,emb_plot_2d),None,None)\n    if (not (aux_2d is None)) & (not (aux_3d is None)) & (aux_Md is None):\n        si_tsne_2d   = si_TSNE.loc[group_type,input_data,scenario,dist,pp,2,alpha,init_method,'Task'].round(2).item()\n        si_tsne_3d   = si_TSNE.loc[group_type,input_data,scenario,dist,pp,3,alpha,init_method,'Task'].round(2).item()\n        col_title_2d = pn.pane.Markdown("## 2D Embedding | <a href='https://en.wikipedia.org/wiki/Silhouette_(clustering)' target='_blank'>SI</a>=%.2f" % si_tsne_2d)\n        emb_plot_2d  = plot_2d_scatter(aux_2d,x='TSNE001',y='TSNE002',c=color_col, cmap=cmap_2d, s=10, toolbar=plot_2d_toolbar)\n        col_title_3d = pn.pane.Markdown("## 3D Embedding | <a href='https://en.wikipedia.org/wiki/Silhouette_(clustering)' target='_blank'>SI</a>=%.2f" % si_tsne_3d)\n        emb_plot_3d  = plot_3d_scatter(aux_3d,x='TSNE001',y='TSNE002',z='TSNE003',c=color_col, cmap=cmap_3d,s=3, ax_range=[aux_3d.min(),aux_3d.max()])\n        plots = pn.Row(pn.Column(col_title_2d,emb_plot_2d), pn.Column(col_title_3d,emb_plot_3d),None)\n    if (not (aux_2d is None)) & (not (aux_3d is None)) & (not (aux_Md is None)):\n        si_tsne_2d   = si_TSNE.loc[group_type,input_data,scenario,dist,pp,2,alpha,init_method,'Task'].round(2).item()\n        si_tsne_3d   = si_TSNE.loc[group_type,input_data,scenario,dist,pp,3,alpha,init_method,'Task'].round(2).item()\n        si_tsne_Md   = si_TSNE.loc[group_type,input_data,scenario,dist,pp,m,alpha,init_method,'Task'].round(2).item()\n        col_title_2d = pn.pane.Markdown("## 2D Embedding | <a href='https://en.wikipedia.org/wiki/Silhouette_(clustering)' target='_blank'>SI</a>=%.2f" % si_tsne_2d)\n        emb_plot_2d  = plot_2d_scatter(aux_2d,x='TSNE001',y='TSNE002',c=color_col, cmap=cmap_2d, s=10, toolbar=plot_2d_toolbar)\n        col_title_3d = pn.pane.Markdown("## 3D Embedding | <a href='https://en.wikipedia.org/wiki/Silhouette_(clustering)' target='_blank'>SI</a>=%.2f" % si_tsne_3d)\n        emb_plot_3d  = plot_3d_scatter(aux_3d,x='TSNE001',y='TSNE002',z='TSNE003',c=color_col, cmap=cmap_3d,s=3, ax_range=[aux_3d.min(),aux_3d.max()])\n        col_title_Md = pn.pane.Markdown("## 3D View of %d-D Embedding | <a href='https://en.wikipedia.org/wiki/Silhouette_(clustering)' target='_blank'>SI</a>=%.2f" % (m,si_tsne_Md))\n        emb_plot_Md  = plot_3d_scatter(aux_Md,x='TSNE001',y='TSNE002',z='TSNE003',c=color_col, cmap=cmap_3d,s=3, ax_range=[aux_Md.min(),aux_Md.max()])\n        plots = pn.GridBox(*[col_title_2d,col_title_3d,col_title_Md,\n                             emb_plot_2d,emb_plot_3d,emb_plot_Md],ncols=3)\n    return plots\n\n\n@pn.depends(sbj_select,input_select,scenario_select,tsne_dist_select,tsne_pp_select,tsne_m_select,tsne_alpha_select,tsne_init_select,tsne_drop_xxxx)\ndef plot_TSNE_Scan_scats(sbj,input_data,scenario,dist,pp,m,alpha,init_method,drop_xxxx):\n    return plot_TSNE_scats(sbj,input_data,scenario,dist,pp,m,alpha,init_method,'Task','above', drop_xxxx)\n\n\n# #### 4. Put the T-SNE Tab elements together\n\ntsne_embs_scan_card             = pn.layout.Card(plot_TSNE_Scan_scats,title='T-SNE Embeddings - Single fMRI Scan', width=1200, header_background='#0072B5', header_color='#ffffff')\ntsne_embs_col                   = pn.Column(tsne_embs_scan_card)\n\ntsne_tab = pn.Column(tsne_LEFT_col,tsne_embs_col)\n\n# ***\n\n# +\nconfig = {"headerControls": {"close": "remove","maximize":"remove"}}\n\n# intro_img  = pn.pane.Image("https://raw.githubusercontent.com/nimh-sfim/manifold_learning_fmri/master/docs/images/Embedding_GUI_Intro.png", width=450, align=('center','center'))\n# intro_text = pn.pane.Markdown("""\n# This dashbaord allows you to explore time-vayring fMRI data embedded using [T-SNE](https://en.wikipedia.org/wiki/T-distributed_stochastic_neighbor_embedding), [UMAP](https://umap-learn.readthedocs.io/en/latest/) and [Laplacian Eigenamps](https://scikit-learn.org/stable/modules/generated/sklearn.manifold.SpectralEmbedding.html). \n\n# All details about this work can be found in [our scientific publication](https://www.frontiersin.org/journals/human-neuroscience/articles/10.3389/fnhum.2023.1134012/full) in the journal [Frontiers in Human Neuroscience](https://www.frontiersin.org/journals/human-neuroscience).\n\n# In a nutshell, fMRI data was acquired for 25 minutes as subjects performed four different cognitive tasks (visual attention, 2-back working memory, simple math and rest). Using the [Craddock atlas](https://onlinelibrary.wiley.com/doi/10.1002/hbm.21333), and a [sliding window](https://www.sciencedirect.com/science/article/pii/S1053811919300874?via%3Dihub) apporach we generated whole-brain, time-varying functional connectivity matrices (left). These are high dimensional matrices (edges X time); and therefore hard to interpret. To evaluate if Manifold Learning can aid with interpretation, we constructed embeddings and checked how well they capture the task structue of the experiment.\n\n# Use, the widgets on the right sidebar to select input data. Use the widgets in each of the tabs below to see how technique specific hyperparameters affect the quality of the embedding and their ability to show the task structure. Have fun!!!!\n# """, width=650)\n\n#intro_frame = pn.layout.FloatPanel(pn.Row(intro_img, intro_text),name='Introduction and basic instructions', position='right-top', config=config)\nintro_frame = pn.layout.FloatPanel(pn.pane.Markdown('### Hello there!!!'),name='Introduction and basic instructions', position='right-top', config=config)\n# -\n\n# Instantiate the template with widgets displayed in the sidebar\ntemplate = pn.template.FastListTemplate(\n    title="Manifold Learning for time-varying functional connectivity",\n    sidebar=[sidebar_desc,sbj_select,input_select,scenario_select, sidebar_divider,sidebar_todo, pn.layout.Divider()],\n    sidebar_width=300,\n    theme_toggle=False\n)\n\n#template.main.append(pn.Column(pn.Tabs(('Laplacian Eigenmaps',le_tab),('T-SNE',tsne_tab),('UMAP',umap_tab)))) #,('T-SNE',tsne_tab),('UMAP',umap_tab))))\ntemplate.main.append(pn.Column(intro_frame,pn.Tabs(('Laplacian Eigenmaps',le_tab),('T-SNE',tsne_tab),('UMAP',umap_tab)))) #,('T-SNE',tsne_tab),('UMAP',umap_tab))))\n\ntemplate.servable()\n#dashboard = template.show(port=port_tunnel)\n\n# +\n# import os\n# port_tunnel = int(os.environ['PORT2'])\n# print('++ INFO: Second Port available: %d' % port_tunnel)\n# dashboard = template.show(port=port_tunnel)\n# -\n\n\n\n\n\n\nawait write_doc()
  `

  try {
    const [docs_json, render_items, root_ids] = await self.pyodide.runPythonAsync(code)
    self.postMessage({
      type: 'render',
      docs_json: docs_json,
      render_items: render_items,
      root_ids: root_ids
    })
  } catch(e) {
    const traceback = `${e}`
    const tblines = traceback.split('\n')
    self.postMessage({
      type: 'status',
      msg: tblines[tblines.length-2]
    });
    throw e
  }
}

self.onmessage = async (event) => {
  const msg = event.data
  if (msg.type === 'rendered') {
    self.pyodide.runPythonAsync(`
    from panel.io.state import state
    from panel.io.pyodide import _link_docs_worker

    _link_docs_worker(state.curdoc, sendPatch, setter='js')
    `)
  } else if (msg.type === 'patch') {
    self.pyodide.globals.set('patch', msg.patch)
    self.pyodide.runPythonAsync(`
    from panel.io.pyodide import _convert_json_patch
    state.curdoc.apply_json_patch(_convert_json_patch(patch), setter='js')
    `)
    self.postMessage({type: 'idle'})
  } else if (msg.type === 'location') {
    self.pyodide.globals.set('location', msg.location)
    self.pyodide.runPythonAsync(`
    import json
    from panel.io.state import state
    from panel.util import edit_readonly
    if state.location:
        loc_data = json.loads(location)
        with edit_readonly(state.location):
            state.location.param.update({
                k: v for k, v in loc_data.items() if k in state.location.param
            })
    `)
  }
}

startApplication()